// Code generated by mockery v2.37.1. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// DALInterface is an autogenerated mock type for the DALInterface type
type DALInterface struct {
	mock.Mock
}

// FindBy provides a mock function with given fields: ctx, entities, criteria, orderBy, limit
func (_m *DALInterface) FindBy(ctx context.Context, entities interface{}, criteria map[string]interface{}, orderBy string, limit int) error {
	ret := _m.Called(ctx, entities, criteria, orderBy, limit)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, map[string]interface{}, string, int) error); ok {
		r0 = rf(ctx, entities, criteria, orderBy, limit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, entity, ID
func (_m *DALInterface) FindByID(ctx context.Context, entity interface{}, ID int) error {
	ret := _m.Called(ctx, entity, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, int) error); ok {
		r0 = rf(ctx, entity, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, entity
func (_m *DALInterface) Save(ctx context.Context, entity interface{}) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDALInterface creates a new instance of DALInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDALInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DALInterface {
	mock := &DALInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
