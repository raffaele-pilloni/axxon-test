// Code generated by mockery v2.37.1. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// ApplicationErrorInterface is an autogenerated mock type for the ApplicationErrorInterface type
type ApplicationErrorInterface struct {
	mock.Mock
}

// Code provides a mock function with given fields:
func (_m *ApplicationErrorInterface) Code() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Error provides a mock function with given fields:
func (_m *ApplicationErrorInterface) Error() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Message provides a mock function with given fields:
func (_m *ApplicationErrorInterface) Message() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewApplicationErrorInterface creates a new instance of ApplicationErrorInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationErrorInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationErrorInterface {
	mock := &ApplicationErrorInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
