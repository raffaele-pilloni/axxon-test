// Code generated by mockery v2.37.1. DO NOT EDIT.

package mock

import (
	context "context"

	entity "github.com/raffaele-pilloni/axxon-test/internal/entity"
	dto "github.com/raffaele-pilloni/axxon-test/internal/service/dto"

	mock "github.com/stretchr/testify/mock"
)

// TaskServiceInterface is an autogenerated mock type for the TaskServiceInterface type
type TaskServiceInterface struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, createTaskDTO
func (_m *TaskServiceInterface) CreateTask(ctx context.Context, createTaskDTO *dto.CreateTaskDTO) (*entity.Task, error) {
	ret := _m.Called(ctx, createTaskDTO)

	var r0 *entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateTaskDTO) (*entity.Task, error)); ok {
		return rf(ctx, createTaskDTO)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateTaskDTO) *entity.Task); ok {
		r0 = rf(ctx, createTaskDTO)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.CreateTaskDTO) error); ok {
		r1 = rf(ctx, createTaskDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessTask provides a mock function with given fields: ctx, task
func (_m *TaskServiceInterface) ProcessTask(ctx context.Context, task *entity.Task) (*entity.Task, error) {
	ret := _m.Called(ctx, task)

	var r0 *entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Task) (*entity.Task, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Task) *entity.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartTaskProcessing provides a mock function with given fields: ctx, task
func (_m *TaskServiceInterface) StartTaskProcessing(ctx context.Context, task *entity.Task) (*entity.Task, error) {
	ret := _m.Called(ctx, task)

	var r0 *entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Task) (*entity.Task, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Task) *entity.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskServiceInterface creates a new instance of TaskServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskServiceInterface {
	mock := &TaskServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
