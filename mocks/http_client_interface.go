// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/raffaele-pilloni/axxon-test/internal/client/dto"
	mock "github.com/stretchr/testify/mock"
)

// HTTPClientInterface is an autogenerated mock type for the HTTPClientInterface type
type HTTPClientInterface struct {
	mock.Mock
}

// Do provides a mock function with given fields: ctx, requestDTO
func (_m *HTTPClientInterface) Do(ctx context.Context, requestDTO *dto.RequestDTO) (*dto.ResponseDTO, error) {
	ret := _m.Called(ctx, requestDTO)

	var r0 *dto.ResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RequestDTO) (*dto.ResponseDTO, error)); ok {
		return rf(ctx, requestDTO)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RequestDTO) *dto.ResponseDTO); ok {
		r0 = rf(ctx, requestDTO)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.RequestDTO) error); ok {
		r1 = rf(ctx, requestDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHTTPClientInterface creates a new instance of HTTPClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHTTPClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *HTTPClientInterface {
	mock := &HTTPClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
